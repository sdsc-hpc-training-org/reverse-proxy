#!/bin/bash

## Authors: Developed by James McDougall [Github JamesMcDougallJr], Scott Sakai, 
## and Mary Thomas. The goal of this script is to start a jupyter notebook on various 
## HPC Systems by using the Reverse Proxy service. This makes a secure connection 
## between the user's local machine and the RP server.

## ====================================================================================
## Usage
##  ./start-jupyter [-p <string>] [-d <string>] [-b <string>] [-t <number>] [-s <jupyerlab, notebook>]
##
##      -p: The partition your job will be started on. This can be either compute or
##          debug. Reminder that the debug queue has a max time of 30 minutes.
##
##      -d: The top level directory for your jupyter notebook. 
##          Default: /home/$USER 
##
##      -A: The Allocation (project) your notebook will be "charged" to. 
##          Default: the same as your system default. This is different for every user, 
##          but you can see your accounts using the `show_accounts` command.
##
##      -b: The batch script you want to submit. Of course the batch script needs to
##          start a jupyter notebook otherwise this script will fail. Cannot be used
##          simultaneously with the -s flag. 
##          Default: ./batch/batch_notebook.sh
##
##      -t: The time in MINTUES that you want the jupyter notebook to run for.
##          Default: 30 minutes
##
##      -s: The server to run for the user, can be 'notebook' for jupyter notebook or 
##          'jupyterlab' for jupyterlab. Cannot be used simultaneously with the -b flag.
##
## =====================================================================================

cd `dirname "$0"`

module purge
module load cpu
module load gcc/10.2.0
module load anaconda3
module load slurm/expanse/20.02.3

source lib/check_available.sh
source lib/parse_time.sh
source lib/jup_cleanup.sh
source lib/remove_old_files.sh
source lib/read_config.sh

INFO=0
jup_root_dir=""
runtime=""
project=""
input_runtime=""
jup_msg="Jupyter not installed. To learn how to install Jupyter using Miniconda, check out this link: https://comet-notebooks-101.readthedocs.io/en/comet/prerequisites.html"

## Example Config
#Host Comet:
#  hostname: comet-*
#  endpoint: comet-user-content.sdsc.edu
#  system: slurm
#  default-partition: compute
#  batch-dir: slurm

vars=($(read_config $(hostname -s)))
export endpoint=${vars[1]} 
queue=${vars[2]}
partition=${vars[3]}
batch_dir=${vars[4]}
[[ "$endpoint" =~ expanse-* ]] && require_account=1 || require_account=0

# Submits the a batch job which defines a jupyter notebook
# Note that behavior is undefined if you configure the script to use
# a batch script that doesn't work or submits something other than a jupyter
# notebook. Its not recommended that you change anything in this function.
function start-jupyter () {

    # get the Reverse proxy API_TOKEN
    response=$(curl -s -w %{http_code} https://manage.$endpoint/getlink.cgi -o -)
    status=$(echo $response | awk '{print $NF}')
    [[ $status != 200 ]] && echo "Error connecting to reverse proxy" && exit 1
    [[ $response == Oops!* ]] && echo $response && exit 1
    export api_token=$(echo $response | awk 'NF>1{printf $((NF-1))}' -)

    check_available jupyter "'$jup_msg'" || exit 1

    # ensure the jupyter config directory exists and is accessible.
    # make a temp file there for the rps to read tokens
    jup_conf_dir="$(jupyter --config-dir)/rps"
    mkdir -p $jup_conf_dir || (echo "Failed to create dir $jup_conf_dir" && exit 1)
    chmod 0700 $jup_conf_dir || (echo "Failed to change permissions for $jup_conf_dir" && exit 1)
    export config=`mktemp -p $jup_conf_dir tmp.XXXXXX.py` 
    [[ $config = "" ]] && echo "Failed to create config file" && exit 1

    # remove old tmp files in this dir if still there
    remove_old_files $jup_conf_dir 10

    # Make a random ssl token
    jupyter_token=$(openssl rand -hex 16)

    # Create the temp config file
    echo "c.NotebookApp.token = '$jupyter_token'" | cat >> "$config"
    [[ $jup_root_dir = "" ]] && jup_root_dir=/home/$USER/ && echo "c.NotebookApp.notebook_dir = '$jup_root_dir'" | cat >> "$config"
    echo "c.NotebookApp.allow_origin = '*'" | cat >> "$config"
    echo "c.NotebookApp.allow_remote_access = True" | cat >> "$config"

    # Give the user their url
    export jupyter_url="https://$api_token.$endpoint?token=$jupyter_token"
    echo Your notebook is here:
    echo -e "\t$jupyter_url"
    echo "If you encounter any issues, please email help@xsede.org and mention the Reverse Proxy Service."

    partition="-p $partition"

    [[ $runtime = "" ]] && echo "No time given. Default is 30 mins" && runtime="-t 00:30:00" || runtime="-t $runtime"
    
    export start_root=$PWD
    [[ $project = "" ]] || project="-A $project"

    if [[ $server = "" ]]; then
        server="notebook"
    fi

    if [[ $server != "notebook" && $server != "jupyterlab" ]]; then
        echo Chose an invalid server. Choices are 'notebook' or 'jupyterlab'
        usage
        exit 1
    fi
    
    [[ $script = "" ]] && echo Using ./$batch_dir/"$server".sh && script=./$batch_dir/"$server".sh

    if [[ $INFO -eq 1 ]]; then
        echo "******************Start notebook info**********************" 
        echo "User $USER"
        echo "On cluster $cluster"
        echo "Using default project" 
        echo "Batch Script: $script"
        echo "Partition: $partition"
        echo "Tempfile: $config"
        echo "Api token: $api_token"
        echo "Jupyter token: $jupyter_token"
        echo "Runtime: $runtime"
        echo "***********************************************************"
    fi

    # if sbatch is available, submit a job using that.
    if [[ $queue = slurm ]]; then
        sbr=$(/cm/shared/apps/slurm/current/bin/sbatch $runtime $project $partition $script)
        if [[ "$sbr" =~ Submitted\ batch\ job\ ([0-9]+) ]]; then
            slurm_id=${BASH_REMATCH[1]}
            echo Your job id is $slurm_id
            echo "You may occasionally run the command 'squeue -j $slurm_id' to check the status of your job"
            cleanup_slurm $slurm_id $config &
            exit 0
        else
            echo "Sbatch failed"
            exit 1
        fi
    elif [[ $queue = torque ]]; then
        qout=$(qsub -l walltime=${runtime#-t **} $project $script)
        if [[ "$qout" =~ [0-9]+.tscc-mgr[0-9].local ]]; then
            qid=$(echo "${BASH_REMATCH[@]}" | sed 's/[^0-9]*//g')
	    qid="${qid:0:${#qid}-1}"
            echo Your job id is $qid
	    echo "You may occasionally run the command 'qstat $qid' to check the status of your job"
            exit 0
        else
            echo Torque failed
            exit 1
        fi
    else
        echo No queue system found. Please use slurm or torque
    fi
}

usage() { 
    echo "Usage: $0 [-p <string>] [-d <string>] [-A <string>] [-b <string>] [-t time] [-i]" 1>&2;
    echo -e "-p: the partition to use, debug or compute. Default is compute" 1>&2;
    echo -e "-d: the top-level directory of your jupyter notebook. Default is /home/$USER" 1>&2;
    echo -e "-A: the project allocation to be used for this notebook. Default is system default (also called project or group)" 1>&2;
    echo -e "-b: the batch script you want to submit. Only those in the batch folder are supported. Default is ./batch/batch_notebook.sh" 1>&2;
    echo "-t: the time to run the notebook. Default is 30 minutes" 1>&2;
    echo "-i: Get extra information about the job you submitted using the script" 1>&2;
    echo "-s: Choose between 'notebook' and 'jupyterlab'"
}

OPTIND=1
err=0
sb_conflict=0
while [ $OPTIND -le "$#" ]
do
    if getopts "h?:d:A:s:p:b:t:i" opt; then
        case "$opt" in
            h|\?)
                usage 
                exit 0
                ;;
            s)  server=$OPTARG
                sb_conflict=$((sb_conflict+1))
                ;;
            d)  start_dir=$OPTARG 
                ;;
            A)  project=$OPTARG   
                ;;
            p)  partition=$OPTARG 
                ;;
            b)  script=$OPTARG 
                sb_conflict=$((sb_conflict+1))
                ;;
            i)  INFO=1 
                ;;
            t)  input_runtime=$OPTARG 
                runtime=$(parse_time $OPTARG) 
                ;;
            *)  echo "Error: invalid optional argument $OPTARG" 
                err=1
                ;;
        esac
    else
    	pos_args=1
        err=1
        ((OPTIND++))
    fi
done

[[ $pos_args ]] && echo "Encountered positional arguments where none are required."

# if there is a conflict between the -s and -b flags
[[ $sb_conflict = 2 ]] && echo "You cannot use the -s flag and the -b flag simultaneously" && err=1

if [[ $partition = "debug" ]]; then
    if [[ $input_runtime -gt 30 ]]; then
        echo "Invalid runtime for debug queue. Must be less than or equal to 30 minutes"
        err=1
    fi
fi

if [[ $project = "" && $require_account = 1 ]]; then
    echo "Expanse requries you to explicitly specify your account. Please provide the -A <Account> argument"
    err=1
fi

[[ $err = 1 ]] && usage && exit 1

start-jupyter
